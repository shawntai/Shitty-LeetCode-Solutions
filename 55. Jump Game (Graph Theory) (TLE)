def constructAdjMatrix(nums):
    adjMatrix = []
    for i in range(len(nums)):
        adjMatrix.append([])
        for j in range(len(nums)):
            adjMatrix[i].append(False)
    for i in range(len(nums)):
        for j in range(nums[i]):
            if i+j+1 < len(nums):
                adjMatrix[i][i + j + 1] = True
    return adjMatrix

'''
import queue

def BFS(nums, start, adjMatrix):
    found = False
    visited = []
    for i in nums:
        visited.append(False)
    q = queue.Queue()
    q.put(start)
    visited[start] = True
    while (not q.empty()):
        v = q.get()
        if v == len(nums) - 1:
            found = True
            break
        for w in range(len(adjMatrix[v])):
            if adjMatrix[v][w] and not visited[w]:
                q.put(w)
                visited[w] = True
    return found
'''

import collections

def BFS(nums, start, adjMatrix):
    found = False
    visited = []
    for i in nums:
        visited.append(False)
    q = collections.deque()
    q.appendleft(start)
    visited[start] = True
    while q:
        v = q.pop()
        if v == len(nums) - 1:
            found = True
            break
        for w in range(len(adjMatrix[v])):
            if adjMatrix[v][w] and not visited[w]:
                q.appendleft(w)
                visited[w] = True
    return found

nums = [2, 0, 0]
adjMtrx = constructAdjMatrix(nums)
print(BFS(nums, 0, adjMtrx))